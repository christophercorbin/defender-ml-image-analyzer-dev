# Multi-stage build for security hardening
# Stage 1: Build dependencies and application
FROM 763104351884.dkr.ecr.us-east-1.amazonaws.com/tensorflow-inference:2.19.0-gpu-py312-cu122-ubuntu22.04-sagemaker AS builder

# Set build arguments for security
ARG DEBIAN_FRONTEND=noninteractive
ARG BUILD_USER=appuser
ARG BUILD_UID=1000

# Create build user for security
RUN groupadd -r ${BUILD_USER} && \
    useradd -r -g ${BUILD_USER} -u ${BUILD_UID} -s /bin/false ${BUILD_USER}

# Security: Update all packages and patch critical vulnerabilities
RUN apt-get update && \
    # Upgrade all packages to latest versions
    apt-get dist-upgrade -y && \
    # Install security updates specifically
    apt-get install -y --no-install-recommends \
        # Essential security packages
        ca-certificates \
        curl \
        gnupg2 \
        # OpenSSL fix - install latest version
        openssl \
        libssl3 \
        # System security updates
        libc6 \
        # Required for application
        libgl1-mesa-glx \
        python3-pip \
        python3-dev && \
    # Remove vulnerable/unnecessary packages that cause security issues
    apt-get remove --purge -y \
        # Remove packages with known vulnerabilities
        emacs \
        emacs-bin-common \
        emacs-common \
        # Remove development tools not needed in production
        gcc \
        g++ \
        make \
        # Remove non-essential package management tools
        apt-utils \
        dpkg-dev || true && \
    # Clean up package cache and temporary files
    apt-get autoremove -y && \
    apt-get autoclean && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /var/cache/apt/* && \
    rm -rf /tmp/* && \
    rm -rf /var/tmp/*

# Security: Upgrade pip and install Python dependencies securely
RUN python3 -m pip install --no-cache-dir --upgrade pip setuptools wheel

# Copy requirements first for better caching
COPY requirements.txt /tmp/requirements.txt

# Install Python dependencies with security flags
RUN python3 -m pip install --no-cache-dir \
        --trusted-host pypi.org \
        --trusted-host pypi.python.org \
        --trusted-host files.pythonhosted.org \
        -r /tmp/requirements.txt && \
    # Install DeepFace with specific version for security
    python3 -m pip install --no-cache-dir deepface==0.0.93 && \
    # Remove pip cache and temporary files
    python3 -m pip cache purge && \
    rm -rf /root/.cache/pip && \
    rm -rf /tmp/* && \
    rm -f /tmp/requirements.txt

# Copy application files with proper permissions
COPY --chown=${BUILD_UID}:${BUILD_UID} image-analyzer.py /opt/ml/code/
COPY --chown=${BUILD_UID}:${BUILD_UID} serve /opt/ml/code/serve
COPY --chown=${BUILD_UID}:${BUILD_UID} testing/assets /opt/ml/testing/assets/
COPY --chown=${BUILD_UID}:${BUILD_UID} testing/integration/test_endpoints.py /opt/ml/testing/integration/test_endpoints.py

# Security: Set proper file permissions
RUN chmod 755 /opt/ml/code/serve && \
    chmod 644 /opt/ml/code/image-analyzer.py && \
    chmod -R 644 /opt/ml/testing/ && \
    # Create necessary directories with proper permissions
    mkdir -p /opt/ml/model && \
    chown -R ${BUILD_UID}:${BUILD_UID} /opt/ml/

# Stage 2: Runtime image with minimal attack surface
FROM ubuntu:22.04 AS runtime

# Set runtime arguments
ARG DEBIAN_FRONTEND=noninteractive
ARG APP_USER=appuser
ARG APP_UID=1000
ARG APP_GID=1000

# Install only essential runtime packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        # Essential runtime libraries
        python3 \
        python3-distutils \
        libpython3.10 \
        # Updated OpenSSL - critical security fix
        openssl \
        libssl3 \
        # Required graphics libraries
        libgl1-mesa-glx \
        libglib2.0-0 \
        # Essential system libraries
        libc6 \
        ca-certificates \
        # Minimal networking
        curl && \
    # Security: Remove unnecessary development tools (keep essential apt)
    apt-get remove --purge -y \
        apt-utils \
        dpkg-dev || true && \
    # Clean up completely
    apt-get autoremove -y && \
    apt-get autoclean && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /var/cache/apt/* && \
    rm -rf /tmp/* && \
    rm -rf /var/tmp/* && \
    # Security: Remove sensitive system files
    rm -f /etc/shadow- && \
    rm -f /etc/passwd- && \
    rm -f /etc/group-

# Security: Create non-root application user
RUN groupadd -r ${APP_USER} -g ${APP_GID} && \
    useradd -r -g ${APP_USER} -u ${APP_UID} -s /bin/false -d /opt/ml ${APP_USER} && \
    # Create application directories
    mkdir -p /opt/ml/code /opt/ml/model /opt/ml/testing && \
    chown -R ${APP_UID}:${APP_GID} /opt/ml/

# Copy Python and application files from builder stage
COPY --from=builder --chown=${APP_UID}:${APP_GID} /usr/local/lib/python3.12 /usr/local/lib/python3.12
COPY --from=builder --chown=${APP_UID}:${APP_GID} /usr/local/bin /usr/local/bin
COPY --from=builder --chown=${APP_UID}:${APP_GID} /opt/ml/ /opt/ml/

# Security: Set environment variables
ENV PYTHONPATH=/opt/ml/code \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    # Security: Disable Python debugging features
    PYTHONOPTIMIZE=1 \
    # Security: Set secure temp directory
    TMPDIR=/tmp \
    # Security: Limit Python imports
    PYTHONNOUSERSITE=1

# Security: Create secure temp directory
RUN mkdir -p /tmp && chmod 1777 /tmp

# Security: Switch to non-root user
USER ${APP_UID}:${APP_GID}

# Security: Set working directory
WORKDIR /opt/ml/code

# Health check for monitoring
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/ping || exit 1

# Expose port
EXPOSE 8080

# Security: Use exec form and run as non-root
ENTRYPOINT ["python3", "-m", "gunicorn", "--chdir", "/opt/ml/code", "-b", "0.0.0.0:8080", "image-analyzer:app"]