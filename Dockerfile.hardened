# SOC 2 Hardened Dockerfile - OpenCV Headless Approach
FROM 763104351884.dkr.ecr.us-east-1.amazonaws.com/tensorflow-inference:2.19.0-cpu-py312-ubuntu22.04-sagemaker

# Security: Set non-interactive mode and create build user
ARG DEBIAN_FRONTEND=noninteractive
ARG BUILD_USER=appuser
ARG BUILD_UID=1000

# Security: Create non-root user early (will switch to it at the end for SOC 2 CC6.1.1)
RUN groupadd -r ${BUILD_USER} && \
    useradd -r -g ${BUILD_USER} -u ${BUILD_UID} -d /home/${BUILD_USER} -m -s /bin/false ${BUILD_USER}

# Security: System updates and minimal dependencies (SOC 2 CC6.2.1)
RUN apt-get update && \
    apt-get dist-upgrade -y && \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
        gnupg2 \
        openssl \
        libssl3 \
        libc6 \
        python3-pip \
        python3-dev \
        # Minimal libraries for headless OpenCV
        libglib2.0-0 && \
    # Security: Remove unnecessary packages (SOC 2 CC6.1.2)
    apt-get remove --purge -y \
        emacs emacs-bin-common emacs-common \
        gcc g++ make \
        apt-utils dpkg-dev || true && \
    # Security: Comprehensive cleanup (SOC 2 CC6.2.2 & CC9.1.2)
    apt-get autoremove -y && \
    apt-get autoclean && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /var/cache/apt/* && \
    rm -rf /tmp/* && \
    rm -rf /var/tmp/* && \
    # Security: Remove sensitive system files (SOC 2 CC9.1.1)
    rm -f /etc/shadow- && \
    rm -f /etc/passwd- && \
    rm -f /etc/group-

# Security: Set working directory
WORKDIR /opt/ml/code

# Security: Upgrade pip securely (SOC 2 CC8.1.1)
RUN python3 -m pip install --no-cache-dir --upgrade pip setuptools wheel

# Copy requirements.txt
COPY requirements.txt .

# Security: Install Python packages with proper OpenCV dependency management
# Step 1: Install base requirements first
RUN python3 -m pip install --no-cache-dir \
        --trusted-host pypi.org \
        --trusted-host pypi.python.org \
        --trusted-host files.pythonhosted.org \
        -r requirements.txt

# Step 2: Install opencv-python-headless and verify it works
RUN python3 -m pip install --no-cache-dir opencv-python-headless==4.10.0.84 && \
    python3 -c "import cv2; print('OpenCV headless installed successfully, version:', cv2.__version__)"

# Step 3: Create a pip constraints file that blocks opencv-python
RUN echo 'opencv-python==999.999.999  # blocked' > /tmp/constraints.txt

# Step 4: Install DeepFace dependencies with constraints to block opencv-python
RUN PIP_CONSTRAINT=/tmp/constraints.txt python3 -m pip install --no-cache-dir \
        pandas>=0.23.4 \
        gdown>=3.10.1 \
        tqdm>=4.30.0 \
        Pillow>=5.2.0 \
        tensorflow>=1.9.0 \
        keras>=2.2.0 \
        flask-cors>=4.0.1 \
        mtcnn>=0.1.0 \
        fire>=0.4.0
        
# Step 5: Install retina-face without its opencv-python dependency
RUN python3 -m pip install --no-cache-dir --no-deps retina-face>=0.0.1

# Step 6: Install DeepFace without dependencies to prevent opencv-python conflict
RUN python3 -m pip install --no-cache-dir --no-deps deepface==0.0.93

# Step 7: Install tf_keras to prevent runtime permission issues
RUN python3 -m pip install --no-cache-dir tf_keras

# Step 8: Verify only opencv-python-headless is installed
RUN python3 -c "import pkg_resources; opencv_packages = [pkg for pkg in pkg_resources.working_set if 'opencv' in pkg.project_name.lower()]; print('OpenCV packages found:', [f'{pkg.project_name}=={pkg.version}' for pkg in opencv_packages]); assert len([pkg for pkg in opencv_packages if pkg.project_name == 'opencv-python-headless']) == 1, 'Only opencv-python-headless should be installed'; assert len([pkg for pkg in opencv_packages if pkg.project_name == 'opencv-python']) == 0, 'opencv-python should not be installed'"

# Step 9: Test that all imports work correctly
RUN python3 -c "import cv2; print('SUCCESS: OpenCV import works, version:', cv2.__version__)" && \
    python3 -c "import tf_keras; print('SUCCESS: tf_keras import works')" && \
    python3 -c "import deepface; print('SUCCESS: DeepFace module import works')" && \
    echo "All core imports successful - DeepFace will work at runtime with available face detection models" || \
    (echo 'FAILED: Testing imports' && exit 1)

# Step 10: Clean up
RUN python3 -m pip cache purge && \
    rm -rf /root/.cache/pip && \
    rm -rf /tmp/* && \
    rm requirements.txt

# Security: Copy code (will set ownership at the end for SOC 2 CC6.1.3)
COPY image-analyzer.py /opt/ml/code/
COPY serve /opt/ml/code/serve
COPY testing/assets /opt/ml/testing/assets/
COPY testing/integration/test_endpoints.py /opt/ml/testing/integration/test_endpoints.py

# Security: Set up complete non-root environment (SOC 2 CC6.1.3 & CC9.1.4)
RUN chmod 755 /opt/ml/code/serve && \
    chmod 644 /opt/ml/code/image-analyzer.py && \
    chmod -R 644 /opt/ml/testing/ && \
    mkdir -p /opt/ml/model && \
    mkdir -p /home/${BUILD_USER}/.deepface && \
    mkdir -p /home/${BUILD_USER}/.cache && \
    chown -R ${BUILD_UID}:${BUILD_UID} /opt/ml/ /home/${BUILD_USER}/ && \
    mkdir -p /tmp && chmod 1777 /tmp

# Security: Set secure Python environment (SOC 2 CC8.1.2)
ENV PYTHONPATH=/opt/ml/code \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONOPTIMIZE=1 \
    TMPDIR=/tmp \
    PYTHONNOUSERSITE=1

# Security: Switch to non-root user (SOC 2 CC6.1.1 & CC9.1.4)
USER ${BUILD_UID}:${BUILD_UID}

# Security: Add health check (SOC 2 CC7.1.1)
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/ping || exit 1

# Security: Expose only required port (SOC 2 CC6.2.3)
EXPOSE 8080

# Security: Use secure entry point - SAME AS COMPLIANCE TEST
ENTRYPOINT ["/opt/ml/code/serve"]